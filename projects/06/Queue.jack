/** Contenedor de cola. */
class Queue {
   field int size;			// numero de elementos en la cola
   field List tail;			// mantiene la pista del Ãºltimo elemento
   field List head;			// referencia al primer elemento
 
   /** Se crea una cola */
   constructor Queue new(int x, int y) {
		let head = List.new(x, y);
   	let size = 1;
   	let tail = head; 		// ouroboros
   	return this;
   }

   
	method int size() { return size; }
   
   /** Empuja un nuevo elemento al final. */
	method void push(int x, int y) {
		var List newElem;
		let newElem = List.new(x, y);
		do tail.setNext(newElem);
		let tail = newElem;
		let size = size + 1;
		return;
	}
     
   /** Coloca un elemento en la parte delantera. */
   method List pop() {
		var List nextElem, retElem;
		let nextElem = head.getNext();
		let retElem = List.new(head.getX(), head.getY());
		do Memory.deAlloc(head);
		let head = nextElem;
		let size = size - 1;
		return retElem;
	}
   
   /** Busca datos dentro de una cola. */
   method boolean contains(int x, int y) {
		var List current;
		let current = head;
		while (~(current = null)) {
			if ((current.getX() = x) & (current.getY() = y)) {
				return true;
			}
			let current = current.getNext();
		}
		return false;
	}
   
   /** Elimina esta cola. */
	method void dispose() {
		do head.dispose();
		do Memory.deAlloc(this);
		return;
	}	
}
